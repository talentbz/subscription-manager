/*
 * Subscription Manager
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package subscriptionManager

import (
	"net/http"
	"subscriptionManager/db"
	"subscriptionManager/models"

	"github.com/gin-gonic/gin"
	"fmt"
	"os"

)

// PlansCurrentGet - Returns a plan that a user is sucbscribed to.\"
func PlansCurrentGet(c *gin.Context) {
	/**
	 * check authentication
	 */
	if IsApiAuthenticated(c) > 0 {
		http.Error(c.Writer, "Failed to authenticate.", http.StatusUnauthorized)
		return
	}
	user_id := GetUserId(c) //get user_id
	var UserPlan models.UserPlans
	//db.DB.Where("userId", user_id).Where("status", "CURRENT").Find(&UserPlans)
	result := db.DB.Where("userId", user_id).First(&UserPlan)
	if result.RowsAffected == 0 {
		c.JSON(http.StatusNotFound, gin.H{
			"message": "User is not subscribed to any plan",
		})
		return
	} else {
		plan_id := UserPlan.PlanId
		var Plan models.AvailablePlans
		db.DB.Where("id", plan_id).First(&Plan)
		Aplan := APlan{
			Id:          int32(Plan.Id),
			Name:        Plan.Name,
			Description: Plan.Description,
			Price:       Plan.Price,
			Recurrence:  int32(Plan.Recurrence),
		}
		if (UserPlan.Status == "CHECKOUT") {
			c.JSON(http.StatusNotFound, AResult{Code: 1, Message: "A previous attempt to subscribe has NOT been completed."})
		} else if (UserPlan.Status == "CURRENT") {
			c.JSON(http.StatusOK, Aplan)
		} else {
			fmt.Println(os.Stdout, "A plan for user [%s] has been found but its status was [%s]", user_id, UserPlan.Status)
			c.JSON(http.StatusNotFound, AResult{Code: 2, Message: "Plan is in incorrect status. Please re-subscribe."})
		}
	}
}
