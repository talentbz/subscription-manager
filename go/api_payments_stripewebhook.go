/*
 * Subscription Manager
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package subscriptionManager

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"subscriptionManager/db"
	"subscriptionManager/models"
	"subscriptionManager/util"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/stripe/stripe-go/v72"
	"github.com/stripe/stripe-go/webhook"
	// "github.com/stripe/stripe-go/v72/checkout/session"
)

// PaymentsStripewebhookPost - Return stripe webhook page.\"
func PaymentsStripewebhookPost(c *gin.Context) {
	config, err := util.LoadConfig(".")
	if err != nil {
		log.Fatal("cannot load config:", err)
	}
	stripe.Key = config.Stripe.StripeAPI

	const MaxBodyBytes = int64(65536)
	c.Request.Body = http.MaxBytesReader(c.Writer, c.Request.Body, MaxBodyBytes)
	log.Println("request body", c.Request.Body)

	body, err := ioutil.ReadAll(c.Request.Body)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error reading request body: %v\n", err)
		c.Status(http.StatusServiceUnavailable)
		return
	}
	// fmt.Fprintf(os.Stdout, "Got body: %s\n", body)
	// Pass the request body and Stripe-Signature header to ConstructEvent, along with the webhook signing key
	// You can find your endpoint's secret in your webhook settings
	endpointSecret := config.Stripe.EndpointSecret
	event, err := webhook.ConstructEvent(body, c.Request.Header.Get("Stripe-Signature"), endpointSecret)

	if err != nil {
		fmt.Fprintf(os.Stderr, "Error verifying webhook signature: %v\n", err)
		c.Status(http.StatusBadRequest) // Return a 400 error on a bad signature
		return
	}
	// Handle the checkout.session.completed event
	if event.Type == "checkout.session.completed" {
		var session stripe.CheckoutSession
		err := json.Unmarshal(event.Data.Raw, &session)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error parsing webhook JSON: %v\n", err)
			c.Status(http.StatusBadRequest)
			return
		}
		fmt.Fprintf(os.Stdout, "sesssssssssss------- ", session)
		// Fulfill the purchase...
		FulfillOrder(session)
	}
	c.Status(http.StatusOK)
	// c.JSON(http.StatusOK, gin.H{})
}

func FulfillOrder(session stripe.CheckoutSession) {

	// update transaction data (customerid, status, lastmodified)
	var transaction []models.Transactions
	db.DB.Where("sessionId", session.ID).Updates(models.Transactions{Status: "CURRENT", LastModifiedTs: time.Now()}).Find(&transaction)
	db.DB.Where("sessionId", session.ID).Find(&transaction)
	user_id := transaction[0].UserPlanId //get user_plan_id in transaction

	// update userplans data (customerid, subscriptionid, status, lastmodified)
	var userPlans []models.UserPlans
	db.DB.Where("id", user_id).Updates(models.UserPlans{SubscriptionId: session.Subscription.ID, Status: "CURRENT", LastModifiedTs: time.Now()}).Find(&userPlans)
	log.Println("session---------------", session)
}
